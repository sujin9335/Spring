<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

	<!-- 
		Spring AOP 
		
		주업무 객체 > MemoImpl
		보조업무 객체 > Logger
		
		MemoImpl + Logger > 결합!!
		
		
		**** 스프링이 특정 객체(클래스)를 인지하려면.. 반드시(!!!!!) <bean>으로 선언해야 한다
		
	-->
	
	<!-- 주업무 객체 -->
	<bean id="memo" class="com.test.spring.aop1.MemoImpl"></bean>
	
	<!-- 보조업무 객체 -->
	<bean id="logger" class="com.test.spring.aop1.Logger"></bean>
	
	<!-- 주업무 객체 + 보조업무 객체 :: AOP : 상단에 xmlns:aop 이거 지칭-->
	<aop:config>
		<!-- 보조업무를 담당할 객체를 지정: 역할 지정 -->
		<aop:aspect id="loggerAspect" ref="logger">
			<!--
				PointCut 지정하기 : 주업무 찾기
				- 주 업무 객체 지정 > 메서드 찾기
				
				MemoImpl.add 메서드
				MemoImpl.read 메서드
				
				AspectJ 표현식
				- execution() 지시자
				- within() 지시자
				
				execution()
				- execution([접근지정자] 반환형 [클래스].메서드(인자))
				- execution(public void com.test.spring.aop1.MemoImpl.add(String))
				
				- *		: 와일드 카드(접근지정자, 반환형, 패키지, 클래스, 메서드)
				- ..	: 와일드 카드(인자)
			
			-->
			
			<aop:pointcut expression="execution(public void com.test.spring.aop1.MemoImpl.add(String))" id="p1"/>
			
			<aop:pointcut expression="execution(public String com.test.spring.aop1.MemoImpl.read(int))" id="p2"/>
			
			<!-- or 연산자를 쓸수는 있다 하지만 가독성 떨어져서 안씀 -->
			<aop:pointcut expression="execution(public String com.test.spring.aop1.MemoImpl.read(int)) || 
									execution(public void com.test.spring.aop1.MemoImpl.add(String))" id="p3"/>
			
			<aop:pointcut expression="execution(public void add(int))" id="p4"/>
			
			<aop:pointcut expression="execution(* com.test.spring.aop1.MemoImpl.*(..))" id="p5"/>
			
			<!-- 메서드 이름 시작이 a / *a(..)은 메서드 끝이 a/ a*a(..) 시작과 끝이 a인 ㅌ메서드 -->
			<aop:pointcut expression="execution(* com.test.spring.aop1.MemoImpl.a*(..))" id="p6"/>
			
			
			<!--  
			
				보조업무 객체(logger) + 포인트컷(MemoImpl.add)
				- 결합 > 위빙(Weaving) > 5종류 Advice 하나 구현
			
			-->
			<!-- method는 보조 업무/ pointcut-ref는 주업무 / aop:after는 주업무(p1) 먼저 후 보조업무(log) 해라 -->
			<!-- <aop:after method="log" pointcut-ref="p1"/> -->
			<!-- <aop:before method="log" pointcut-ref="p1"/> -->
			
			 <!-- <aop:after method="log" pointcut-ref="p1"/> 
			 <aop:after method="log" pointcut-ref="p2"/> -->
			
			<!-- <aop:after method="log" pointcut-ref="p3"/> -->
			
			<!-- <aop:after method="log" pointcut-ref="p4"/> -->
			
			<!-- <aop:after method="log" pointcut-ref="p5"/> -->
			
			<!-- <aop:after method="log" pointcut-ref="p6"/> -->
			
			<!-- 실행시간 -->
			<!-- <aop:around method="time" pointcut-ref="p5"/> -->
			
			<!-- 히스토리 -->
			<!-- <aop:after-returning method="history" pointcut-ref="p2" returning="memo"/> -->
			
			<aop:after-throwing method="check" pointcut-ref="p2" throwing="e"/>
			
		</aop:aspect>
	</aop:config>
	
	



</beans>



